import { useEffect, useState } from "react";

export default function App() {
    const [me, setMe] = useState(null);         // BFF /api/me (ÏÑ∏ÏÖò Ï≤¥ÌÅ¨Ïö©)
    const [profile, setProfile] = useState(null); // user-service /users/me
    const [keys, setKeys] = useState([]);         // user-service /keys
    const [loading, setLoading] = useState(true);
    const [navBusy, setNavBusy] = useState(false);
    const [opBusy, setOpBusy] = useState(false);  // ÌÇ§ Îì±Î°ù/ÏÇ≠Ï†ú Ï§ë
    const [msg, setMsg] = useState("");
    const [form, setForm] = useState({ name: "", publicKey: "" });

    const ORIGIN = typeof window !== "undefined" ? window.location.origin : "";

    // üëá Í≥µÏö© Ìó¨Ìçº
    async function safeJson(res) {
        const ct = (res.headers.get("content-type") || "").toLowerCase();
        if (ct.includes("application/json")) {
            // Îπà Î∞îÎîî(0 byte)Î©¥ json()Ïù¥ ÌÑ∞ÏßÄÎØÄÎ°ú textÎ°ú Ìïú Î≤à ÌôïÏù∏
            const text = await res.text();
            if (!text) return null;
            try { return JSON.parse(text); } catch { return null; }
        }
        return null;
    }

    // BFF ÏÑ∏ÏÖò Ï≤¥ÌÅ¨
    async function loadMe() {
        try {
            const res = await fetch("/api/me", { credentials: "include", cache: "no-store" });
            if (res.ok) {
                const data = await safeJson(res);
                setMe(data ?? null);
            } else {
                setMe(null);
            }
        } catch { setMe(null); }
        finally { setLoading(false); }
    }

    // user-service Îç∞Ïù¥ÌÑ∞ Î°úÎî©
    async function loadUserData() {
        if (!me) return;
        try {
            const [pRes, kRes] = await Promise.all([
                fetch("/api/ds/user/users/me", { credentials: "include", cache: "no-store" }),
                fetch("/api/ds/user/keys",      { credentials: "include", cache: "no-store" }),
            ]);

            if (pRes.ok) {
                const p = await safeJson(pRes);
                if (p) setProfile(p);
            } else if (pRes.status === 403) {
                setMsg("ÌîÑÎ°úÌïÑ Í∂åÌïú Í±∞Î∂Ä(403)"); // SecurityConfig Îß§Ïπ≠ ÌôïÏù∏ ÌïÑÏöî
            }

            if (kRes.ok) {
                const k = await safeJson(kRes);
                if (Array.isArray(k)) setKeys(k);
            } else if (kRes.status === 400) {
                const txt = await kRes.text().catch(() => "");
                setMsg(`ÌÇ§ Î™©Î°ù ÏöîÏ≤≠ Ïã§Ìå®(400) ${txt}`);
            }
        } catch (e) {
            console.error(e);
            setMsg("Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®");
        }
    }

    useEffect(() => { loadMe(); }, []);
    useEffect(() => { if (me) loadUserData(); }, [me]);

    const onLogin = () => {
        setNavBusy(true);
        window.location.assign(`${ORIGIN}/auth/login`);
    };
    const onLogout = () => {
        setNavBusy(true);
        window.location.assign(`${ORIGIN}/logout`);
    };

    // ÌÇ§ Îì±Î°ù
    const createKey = async (ev) => {
        ev?.preventDefault?.();

        if (!form.name.trim() || !form.publicKey.trim()) {
            setMsg("Ïù¥Î¶ÑÍ≥º Í≥µÍ∞úÌÇ§Î•º Î™®Îëê ÏûÖÎ†•ÌïòÏÑ∏Ïöî.");
            return;
        }

        setOpBusy(true);
        setMsg("");
        try {
            const res = await fetch("/api/ds/user/keys", {
                method: "POST",
                credentials: "include",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    name: form.name.trim(),
                    publicKey: form.publicKey.trim(),
                }),
            });

            if (res.ok) {
                setForm({ name: "", publicKey: "" });
                await loadUserData();
                setMsg("ÌÇ§Í∞Ä Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.");
            } else {
                const txt = await safeText(res);
                setMsg(`ÌÇ§ Îì±Î°ù Ïã§Ìå® (${res.status}) ${txt}`);
            }
        } catch (err) {
            console.error(err); // ‚Üê errÎ•º ÏÇ¨Ïö©ÌïòÎ©¥ no-unused-vars Ìï¥ÏÜå
            setMsg("ÌÇ§ Îì±Î°ù Ï§ë Ïò§Î•ò");
        } finally {
            setOpBusy(false);
        }
    };

    // ÌÇ§ ÏÇ≠Ï†ú
    async function deleteKey(id) {
        if (!confirm("Ï†ïÎßê ÏÇ≠Ï†úÌï†ÍπåÏöî?")) return;
        setOpBusy(true);
        setMsg("");
        try {
            const res = await fetch(`/api/ds/user/keys/${id}`, {
                method: "DELETE",
                credentials: "include",
            });
            if (res.ok || res.status === 204) {
                setKeys(prev => prev.filter(k => k.id !== id));
                setMsg("ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.");
            } else {
                const txt = await safeText(res);
                setMsg(`ÏÇ≠Ï†ú Ïã§Ìå® (${res.status}) ${txt}`);
            }
        } catch {
            setMsg("ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò");
        } finally {
            setOpBusy(false);
        }
    }

    if (loading) return <div>Î°úÎî©Ï§ë...</div>;

    return (
        <main style={{ minHeight: "100vh", display: "grid", placeItems: "center" }}>
            <div style={{ width: 720, maxWidth: "95vw", padding: 24, borderRadius: 16, boxShadow: "0 10px 30px rgba(0,0,0,.08)" }}>
                <h1 style={{ marginTop: 0 }}>GJ ÌÅ¥ÎùºÏö∞Îìú ‚Äî Ìè¨ÌÑ∏</h1>

                {me ? (
                    <>
                        {/* ÌîÑÎ°úÌïÑ ÏöîÏïΩ */}
                        <section style={{ margin: "12px 0 16px" }}>
                            <b>ÌôòÏòÅÌï©ÎãàÎã§.</b>{" "}
                            <span>{me.user?.displayName || me.name || me.email}</span>
                            {profile && (
                                <span style={{ color: "#666", marginLeft: 8 }}>
                  (ID: {profile.id}, Email: {profile.email})
                </span>
                            )}
                        </section>

                        {/* Î©îÏãúÏßÄ/ÏïåÎ¶º */}
                        {msg && (
                            <div style={{ background: "#f1f7ff", border: "1px solid #d9e7ff", color: "#174ea6", padding: 10, borderRadius: 8, marginBottom: 12 }}>
                                {msg}
                            </div>
                        )}

                        {/* SSH ÌÇ§ Î™©Î°ù */}
                        <section style={{ marginBottom: 20 }}>
                            <h3 style={{ margin: "8px 0" }}>ÎÇ¥ SSH ÌÇ§</h3>
                            {keys?.length ? (
                                <ul style={{ listStyle: "none", padding: 0, margin: 0 }}>
                                    {keys.map(k => (
                                        <li key={k.id} style={itemRow}>
                                            <div style={{ flex: 1 }}>
                                                <div><b>{k.name}</b></div>
                                                <div style={{ fontSize: 12, color: "#666" }}>{k.fingerprint}</div>
                                                <div style={{ fontSize: 12, color: "#999", whiteSpace: "nowrap", overflow: "hidden", textOverflow: "ellipsis", maxWidth: 520 }}>
                                                    {k.publicKey}
                                                </div>
                                            </div>
                                            <button onClick={() => deleteKey(k.id)} style={btnDanger} disabled={opBusy}>ÏÇ≠Ï†ú</button>
                                        </li>
                                    ))}
                                </ul>
                            ) : (
                                <div style={{ color: "#666" }}>Îì±Î°ùÎêú ÌÇ§Í∞Ä ÏóÜÏäµÎãàÎã§.</div>
                            )}
                        </section>

                        {/* SSH ÌÇ§ Îì±Î°ù Ìèº */}
                        <section style={{ marginBottom: 24 }}>
                            <h3 style={{ margin: "8px 0" }}>SSH ÌÇ§ Îì±Î°ù</h3>
                            <form onSubmit={createKey}>
                                <div style={fieldRow}>
                                    <label style={label}>Ïù¥Î¶Ñ</label>
                                    <input
                                        type="text"
                                        value={form.name}
                                        onChange={e => setForm(f => ({ ...f, name: e.target.value }))}
                                        placeholder="Ïòà: macbook"
                                        style={input}
                                        disabled={opBusy}
                                    />
                                </div>
                                <div style={fieldRow}>
                                    <label style={label}>Í≥µÍ∞úÌÇ§</label>
                                    <textarea
                                        value={form.publicKey}
                                        onChange={e => setForm(f => ({ ...f, publicKey: e.target.value }))}
                                        placeholder="ssh-ed25519 AAAAC3... user@host"
                                        style={{ ...input, height: 96 }}
                                        disabled={opBusy}
                                    />
                                </div>
                                <div style={{ display: "flex", gap: 8 }}>
                                    <button type="submit" style={btn} disabled={opBusy}>
                                        {opBusy ? "Îì±Î°ù Ï§ë..." : "Îì±Î°ù"}
                                    </button>
                                    <button type="button" style={btnSecondary} onClick={() => setForm({ name: "", publicKey: "" })} disabled={opBusy}>
                                        Ï¥àÍ∏∞Ìôî
                                    </button>
                                    <div style={{ flex: 1 }} />
                                    <button onClick={onLogout} style={btn} disabled={navBusy}>{navBusy ? "Ïù¥Îèô Ï§ë..." : "Î°úÍ∑∏ÏïÑÏõÉ"}</button>
                                </div>
                            </form>
                        </section>

                        {/* (ÎîîÎ≤ÑÍ∑∏Ïö©) ÏõêÎ≥∏ Î≥¥Í∏∞ ÌÜ†Í∏Ä */}
                        <details style={{ marginTop: 8 }}>
                            <summary>ÏûêÏÑ∏Ìûà Î≥¥Í∏∞ (ÎîîÎ≤ÑÍ∑∏)</summary>
                            <pre style={preBox}>{JSON.stringify({ me, profile, keys }, redactTokens, 2)}</pre>
                        </details>
                    </>
                ) : (
                    <>
                        <p style={{ color: "#666" }}>ÎπÑÎ°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏûÖÎãàÎã§. Î©îÏù∏ÏóêÏÑú ÎåÄÍ∏∞Ìï©ÎãàÎã§.</p>
                        <button onClick={onLogin} style={btn} disabled={navBusy}>
                            {navBusy ? "Ïù¥Îèô Ï§ë..." : "Î°úÍ∑∏Ïù∏"}
                        </button>
                    </>
                )}
            </div>
        </main>
    );
}

const safeText = async (res) => {
    try { return await res.text(); } catch { return ""; }
};

const redactTokens = (k, v) => {
    const key = (k || "").toLowerCase();
    if (["token", "access_token", "id_token", "refresh_token"].some(s => key.includes(s))) return "[redacted]";
    return v;
};

const itemRow = { display: "flex", gap: 12, alignItems: "center", padding: "10px 0", borderBottom: "1px solid #eee" };
const fieldRow = { display: "flex", gap: 12, alignItems: "center", marginBottom: 10 };
const label = { width: 70, fontSize: 14, color: "#444" };
const input = { flex: 1, border: "1px solid #ddd", borderRadius: 10, padding: "10px 12px", fontSize: 14, outline: "none" };
const preBox = { background: "#f7f7f7", padding: 12, borderRadius: 8, overflow: "auto", maxHeight: 280 };
const btn = { padding: "10px 16px", borderRadius: 12, border: "1px solid #111", background: "#111", color: "#fff", cursor: "pointer" };
const btnSecondary = { ...btn, background: "#fff", color: "#111" };
const btnDanger = { ...btn, background: "#fff", color: "#c22", borderColor: "#c22" };
